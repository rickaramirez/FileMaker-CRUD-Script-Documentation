# Implementation and use of the CRUD Script functionality

Version: 1.0  
Author: Michael Phillips  
Publish Date: November 17, 2011

## Table of Contents

1. [Overview of CRUD](#overview)  
2. [The Six Method of CRUD](#six-methods)  
  2.1  [Create](#create)  
  2.2  [Read](#read)  
  2.3  [Update](#update)  
  2.4  [Delete](#delete)  
  2.5  [Find](#find)  
  2.6  [View](#view)  
3. [CRUD Dictionary Parameters](#crud-dictionary-parameters)  
  3.1  [TableName](#tablename)  
  3.2  [TableID](#tableid)  
  3.3  [Method](#method)  
  3.4  [ReadFieldList](#readfieldlist)  
  3.5  [ReadResponseLists](#readresponselists)  
  3.6  [UpdateDict](#updatedict)  
  3.7  [SearchRequests](#searchrequests)  
	3.7.1  [PrimaryKey](#primarykey)  
	3.7.2  [MultiRequest](#multirequest)  
  3.8  [ViewDict](#viewdict)  
  3.9  [UpdateMultiple](#updatemultiple)  
  3.10  [DeleteMultiple](#deletemultiple)  
  3.11  [UseFoundSet](#usefoundset)  
  3.12  [ShowDialogs](#showdialogs)  
  3.13  [UseWindowName](#usewindowname)  

<div id="overview">
</div>

## Overview of CRUD

CRUD stands for Create, Read, Update and Delete.  These four functions, along with the two additions we've made to the standard CRUD concept, Find and View, comprise the vast majority of the scripting functionality that we perform on a daily basis, from the most basic button script to the most complex data processing scripts.

With the CRUD script, we have the ability execute those processes in a standardized, consistent, controlled and rapid way, all while writing less code, making less layouts, and making less table occurrences.  The CRUD script essentially serves as an API (or Application Programming Interface) for each file, allowing you to fully interact with the data in the file without having to rewrite those interactions every time you want to activate them.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="six-methods">
</div>
				
## The Six Methods of CRUD

### Create

**Method:** C  
**Sub-operations:** U, R  
**Applicable parameters:** 

* ReadFieldList
* UpdateDict

**Description:** Create will make a new record in the destination table.  Optionally, it will update any fields that you tell it to update, and can optionally return to you a list of values form that new record, such as the resulting Primary Key value.

A Create call would look like this:

For file a01_PERSON:

	# ( "CRUD" ;
	  # ( "TableName" ; "A_PERSON" )
	& # ( "Method" ; "C" )
	& # ( "UpdateDict" ; 
	    # ( "First Name" ; "Michael" )
		& # ( "Last Name" ; "Phillips" )	
		& # ( "Gender" ; "M" )
		)
	& # ( "ReadFieldList" ; "Worker Name FML¶UID" ) 
	)

This will create a new record in A_PERSON, set the field First Name with the value "Michael", Last Name with "Phillips", and Gender with "M", and then return a script result with the Worker Name FML and UID values.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="read">
</div>
		
### Read

**Method:** R  
**Sub-operations:** none  
**Applicable parameters:** 

* SearchRequests
* ReadFieldList

**Description:** Read will return a dictionary of values for each record in the found set.

A Read call would look like this:

For file a01_PERSON:

	# ( "CRUD" ;
	  # ( "TableName" ; "A_PERSON" )
	& # ( "Method" ; "R" )
	& # ( "SearchRequests" ;
	    # ( "Request" ;
	        # ( "Address City" ; "Brooklyn" )
	      & # ( "Address Zip5" ; "11205" )
	      )
	    )
	& # ( "ReadFieldList" ; "Worker Name FML¶UID" ) 
	)

This will return a dictionary of data with the Worker Name FML and UID of each A_PERSON record in the found set.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="update">
</div>
		
### Update

**Method:** U  
**Sub-operations:** R  
**Applicable parameters:** 

* SearchRequests
* UpdateDict
* ReadFieldList

**Description:** Update will set the specified fields with the specified values for each record in the found set.  By default, the script will only update one record, and if more than one record is in the found set, it will return an error.  If you would like to update multiple records, specify the optional parameter UpdateMultiple as `TRUE`.

An Update call would look like this:

For file a01_PERSON:

	# ( "CRUD" ;
	  # ( "TableName" ; "A_PERSON" )
	& # ( "Method" ; "U" )
	& # ( "SearchRequests" ;
	      # ( "[PrimaryKey]" ; "1669688" )
	    )
	& # ( "UpdateDict" ; 
	      # ( "First Name" ; "Michael" )
	  	& # ( "Last Name" ; "Phillips" )	
	  	& # ( "Gender" ; "M" )
	  	)	
	& # ( "ReadFieldList" ; "Worker Name FML¶UID" )
	)

This will find the record with the key field value (in this case, UID) of "1669688", update the record to have the value "Michael" in the First Name field, "Phillips" in the Last Name field, and "M" in the Gender field.  Once the record has been updated, the script will return a dictionary of values for the record containing Worker Name FML and UID.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="delete">
</div>
				
### Delete

**Method:** D  
**Sub-operations:** none  
**Applicable parameters:** 

* SearchRequests

**Description:** Delete will delete the specified record.  By default, the script will only delete one record, and if more than one record is in the found set, it will return an error.  If you would like to delete multiple records, specify the optional parameter DeleteMultiple as `TRUE`.

An Update call would look like this:

For file a01_PERSON:

	# ( "CRUD" ;
	  # ( "TableName" ; "A_PERSON" )
	& # ( "Method" ; "D" )
	& # ( "SearchRequests" ;
	      # ( "[PrimaryKey]" ; "1669688" )
	    )
	)

This will find the record with the key field value of "1669688" and delete it.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)
		
<div id="find">
</div>
				
### Find

**Method:** F  
**Sub-operations:** R  
**Applicable parameters:** 

* SearchRequests

**Description:** Find will perform a search in the target table.

A Find call would look like this:

For file a01_PERSON:

	# ( "CRUD" ;
	  # ( "TableName" ; "A_PERSON" )
	& # ( "Method" ; "F" )
	& # ( "SearchRequests" ;
	      # ( "Request" ;
	          # ( "Address City" ; "Brooklyn" )
	        )
	    & # ( "Request" ;
	          # ( "Address State" ; "NY" )
	        & # ( "Omit" ; 1 )
	        ) 
	    )
	)
This will find all records that have "Brooklyn" in the City field that do not have "NY" in the state field, and will return a result count.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="view">
</div>
				
### View

**Method:** V  
**Sub-operations:** F  
**Applicable parameters:** 

* SearchRequests
* ViewDict

**Description:** Find will perform a search in the target table.

A Find call would look like this:

For file a01_PERSON:

	# ( "CRUD" ;
	  # ( "TableName" ; "A_PERSON" )
	& # ( "Method" ; "D" )
	& # ( "SearchRequests" ;
	      # ( "Request" ;
	          # ( "Address City" ; "Brooklyn" )
	        )
	    & # ( "Request" ;
	          # ( "Address State" ; "NY")
	        & # ( "Omit" ; 1 )
	        ) 
	    )
	& # ( "ViewParameters" ; 
        # ( "DestinationLayoutName" ; "A_PERSON Main__" )
      & # ( "NewWindow" ; TRUE )
      & # ( "WindowAlignCenter" ; TRUE )
	    )
	)
This will find all records that have "Brooklyn" in the City field that do not have "NY" in the state field.  Once the records are found, it will create a new window, navigate to the A_PERSON Main layout, and align the window to the center of the screen.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="crud-dictionary-parameters">
</div>
				
## CRUD Dictionary Parameters

Each parameter listed in the following section is designed to be handled by the CRUD script.  You can pass any of these parameters in, but keep in mind that some of them are mutually exclusive, and we will develop the documentation moving forward to outline the conflicts.

**Important:** To pass any of these parameters in, you must first define a super dictionary CRUD and insert the following parameters within it.  For example:

	# ( "CRUD" ; 
	      # ( "TableName" ; "A_PERSON" )
	    & # ( "Method" ; "R")
	  )

<div id="tablename">
</div>
				
### TableName

**Example:** `# ( "TableName" ; "A_PERSON" )`  
**Value Type:** String  
**Description:** The name of the target table for the operation.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="tableid">
</div>
				
### TableID

**Example:** `# ( "TableID" ; 1065149 )`  
**Value Type:** Number  
**Description:** The FileMaker internal ID of the target table for the operation.  This can be identified by using the following calculation: `FM_Name_ID ( Get ( LayoutTableName ) ; "T" ; "" ; "" )` when you are on a layout based on the target table.  The resulting ID is the unique FileMaker internal ID to identify the table, and will endure a table name change.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="method">
</div>
				
### Method

**Example:** `# ( "Method" ; "R" )`  
**Value Type:** String  
**Description:** The abbreviation of the method to be performed.  Values can be C (Create), R (Read), U (Update), D (Delete), F (Find) or V (View).

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="readfieldlist">
</div>
				
### ReadFieldList

**Example:** `# ( "ReadFieldList" ; "First Name¶Last Name¶Gender" )`  
**Value Type:** List  
**Description:** A return-separated list of human names for the fields you want to be returned as the script result.  If this value is not specified, no values will be returned.  If you want all available criteria to be returned for the record, you can pass in a dictionary item "All" as such: `# ( "ReadFieldList" ; # ( "All" ; TRUE ))`.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="readresponselists">
</div>
				
### ReadResponseLists

**Example:** `# ( "ReadResponseLists" ; # ( "Response" ; # ( "CriterionKey" ; "Email" ) ) )`  
**Value Type:** Dictionary  
**Description:** A dictionary of lists to be returned of values that are read back from the CRUD script.

For instance, if you had as a part of your ReadFieldList the field Email, and you wanted those values returned to you as a carriage-return-separated list in addition to the Record dictionaries, you can request that list here.  The parameter # ( "CriterionKey" ) is the human name of one of the criteria that you requested in your read field list. **Note that you cannot request a ReadResponseList for a criterion that you did not request in your ReadFieldList**

In your result dictionary, you will see the following dictionary contained:

	# ( "ResponseLists" ; 
			# ( "Emails" ; "mphillips@nyhtc.org¶mphillips@nyhtc.org¶dshockley@nyhtc.org¶kmrudmin@gmail.com")
	)

The response lists can be referenced by their CriterionKey in the CRUD Script result dictionary ResponseLists.  Thusly, you can use your resulting Email list by referencing `DictGet ( DictGet ( Get ( ScriptResult ) ; "ResponseLists" ) ; "Emails" )`

<div id="delimiter">
</div>
				
#### Delimiter

You have the option of also passing in a delimiter other than a carriage return to separate the returned list.  You can specify this as such:

	# ( "ReadResponseLists" ; 
			# ( "Response" ;
					# ( "CriterionName" ; "First Name" )
				&	# ( "Delimiter" ; ", " )
			)
	)

This will return to you:

	# ( "ResponseLists" ; 
			# ( "First Name" ; "Michael, Michael, Dan, Katrina")
	)
	
<div id="uniquevaluesonly">
</div>
				
#### UniqueValuesOnly

You have the option of also passing in a switch that will tell the CRUD script to return to you only the unique values in the list.  You can specify this as such:

	# ( "ReadResponseLists" ; 
			# ( "Response" ;
					# ( "CriterionName" ; "First Name" )
				&	# ( "UniqueValuesOnly" ; TRUE )
			)
	)

This will return to you:

	# ( "ResponseLists" ; 
			# ( "First Name" ; "Michael, Dan, Katrina")
	)
	
<div id="omitblanks">
</div>
				
#### OmitBlanks

You have the option of also passing in a switch that will tell the CRUD script to return to you only values that are not blank.  You can specify this as such:

	# ( "ReadResponseLists" ; 
			# ( "Response" ;
					# ( "CriterionName" ; "First Name" )
				&	# ( "OmitBlanks" ; TRUE )
			)
	)

This will return to you:

	# ( "ResponseLists" ; 
			# ( "First Name" ; "Michael, Dan, Katrina")
	)

Instead of, say:

	# ( "ResponseLists" ; 
			# ( "First Name" ; "Michael, , , Dan, Katrina")
	)

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="updatedict">
</div>
				
### UpdateDict

**Example:** `# ( "UpdateDict" ; # ( "First Name" ; "Michael" ) )`  
**Value Type:** Dictionary  
**Description:** A dictionary of human field names and values to be updated in the target record.  Multiple dictionary items should be specified to update multiple fields.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="searchrequests">
</div>
				
### SearchRequests

**Example:** `# ( "SearchRequests" ; # ( "Request" ; # ( "First Name" ; "Michael") ) )`  
**Value Type:** Dictionary  
**Description:** A dictionary of search requests to be performed.  Each request is defined by a "Request" dictionary, and multiple can be specified within the "SearchRequests" dictionary.  Each Request can contain multiple search criteria for the search, and can also contain an optional `# ( "Omit" ; TRUE )` parameter to specify the request as an omit request.

<div id="primarykey">
</div>
				
#### [PrimaryKey]

Additionally, if you would like to find one record using the primary key value, you can pass in a dictionary item in "SearchRequests" as such:

`# ( "[PrimaryKey]" ; "1669688")`

This command will return to you one and only one record. 

<div id="multirequest">
</div>
				
#### MultiRequest

To create a dynamic set of requests based on a list, you can pass in a special request called "MultiRequest" as such: 

	# ( "MultiRequest" ;  
			# ( "[FieldTitle]" ; "First Name" ) 
		& # ( "[ListOfValues]" ; "Michael¶Dan¶Andrew¶Patrick" ) 
		& # ( "[Omit]" ; FALSE )
		
		& # ( "Last Name" ; "Phillips" )
		& # ( "Gender" ; "M" ) 
	)

This dictionary has three required parameters: [FieldHumanName], [ListOfValues] and [Omit].  [FieldHumanName] is the single field that you want to perform the multiple searches on.  [ListOfValues] is the carriage-return separated list of values that you want to create requests for.  [Omit] is a parameter that tells whether you want to omit the MultiRequest, and will default to FALSE, so if it isn't specified, all requests will be standard finds.  

The last two dictionary items are standard find requests items, so all resulting requests will also include any extra standard find requests as well.

With the example above, the CRUD script will create the following requests in addition to any other requests you specified within the # ( "SearchParameters" ) dictionary:

		# ( "Request" ; 
			# ( "First Name" ; "Michael" )
		& # ( "Last Name" ; "Phillips" )
		& # ( "Gender" ; "M" )
		)	
	& # ( "Request" ; 
			# ( "First Name" ; "Dan" )
		& # ( "Last Name" ; "Phillips" )
		& # ( "Gender" ; "M" )
		)	
	& # ( "Request" ; 
			# ( "First Name" ; "Andrew" )
		& # ( "Last Name" ; "Phillips" )
		& # ( "Gender" ; "M" )
		)	
	& # ( "Request" ; 
			# ( "First Name" ; "Patrick" )
		& # ( "Last Name" ; "Phillips" )
		& # ( "Gender" ; "M" )
	)

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="viewdict">
</div>
				
### ViewDict

**Example:** `# ( "ViewDict" ; # ( "NewWindow" ; TRUE ) & # ( "WindowTitle" ; "This New Window" ) )`  
**Value Type:** Dictionary  
**Description:** A dictionary to specify the parameters for the view function.  The valid parameters that can be specified are as follows:

**DestinationLayoutID** _[String]_ - The FileMaker internal ID of the destination layout  
**DestinationLayoutName** _[String]_ - The name of the destination layout  
**NewWindow** _[Boolean]_ - The name of the destination layout  
**WindowAlignCenter** _[Boolean]_ - Center the target window on the screen  
**WindowAlignLeft** _[Boolean]_ - Snap the window to the left side of the screen  
**WindowAlignRight** _[Boolean]_ - Snap the window to the right side of the screen  
**WindowAlignTop** _[Boolean]_ - Snap the window to the top of the screen  
**WindowCascade** _[Boolean]_ - Move the target window to the right 22 pixels and down 22 pixels  
**ResizeToFit** _[Boolean]_ - Resize the window to fit the contents of the window  
**StatusAreaShow** _[Boolean]_ - Show the status area in the target window  
**StatusAreaHide** _[Boolean]_ - Hide the status area in the target window  
**WindowTitle** _[String]_ - Set the name of the target window  

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="updatemultiple">
</div>
				
### UpdateMultiple

**Example:** `# ( "UpdateMultiple" ; TRUE )`  
**Value Type:** Boolean  
**Description:** This will allow the CRUD Script to update all records in the found set.  This parameter is required for this to happen because we want to make sure that this possibly dangerous functionality is intentionally used.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="deletemultiple">
</div>
				
### DeleteMultiple

**Example:** `# ( "DeleteMultiple" ; TRUE )`  
**Value Type:** Boolean  
**Description:** This will allow the CRUD Script to delete all records in the found set.  This parameter is required for this to happen because we want to make sure that this possibly dangerous functionality is intentionally used.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="usefoundset">
</div>
				
### UseFoundSet

**Example:** `# ( "UseFoundSet" ; TRUE )`  
**Value Type:** Boolean  
**Description:** This will use the current found set of records instead of performing a search.  

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="showdialogs">
</div>
				
### ShowDialogs

**Example:** `# ( "ShowDialogs" ; TRUE )`  
**Value Type:** Boolean  
**Description:** This will allow any dialogs that are specified for debugging purposes to appear to the user.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)

<div id="usewindowname">
</div>
				
### UseWindowName

**Example:** `# ( "UseWindowName" ; "This Window Name" )`  
**Value Type:** String  
**Description:** This will have the script target a specific window instead of using either the current window or any new windows made.

[^ Back to Top](#implementation_and_use_of_the_crud_script_functionality)



















